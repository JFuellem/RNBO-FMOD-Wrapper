//
//  RNBO_FMOD.cpp
//  RNBO_FMOD
//
//  Created by Jonas FÃ¼llemann on 09.11.23.
//

#include <stdio.h>

#include <string.h>

#if defined(__EMSCRIPTEN__)
#include <emscripten.h>
#endif

#include "RNBOWrapper.hpp"

using namespace RNBOFMODHelpers;

#define MAX_RNBO_PARAMETERS 1000

extern "C" RNBO::PatcherFactoryFunctionPtr @PLUGIN_NAME@FactoryFunction(RNBO::PlatformInterface* platformInterface);

extern "C" {
#if defined(__EMSCRIPTEN__)
    EMSCRIPTEN_KEEPALIVE
    // For WebGL builds, prefix with plugin name to avoid conflicts
    F_EXPORT FMOD_DSP_DESCRIPTION* F_CALL @PLUGIN_NAME@_GetDSPDescription();
#else
    // For other platforms, keep original name
    F_EXPORT FMOD_DSP_DESCRIPTION* F_CALL FMODGetDSPDescription();
#endif
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspcreate (FMOD_DSP_STATE *dsp_state);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dsprelease (FMOD_DSP_STATE *dsp_state);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspreset (FMOD_DSP_STATE *dsp_state);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspprocess (FMOD_DSP_STATE *dsp_state, unsigned int length, const FMOD_DSP_BUFFER_ARRAY *inbufferarray, FMOD_DSP_BUFFER_ARRAY *outbufferarray, FMOD_BOOL inputsidle, FMOD_DSP_PROCESS_OPERATION op);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspsetparamfloat (FMOD_DSP_STATE *dsp_state, int index, float value);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspgetparamfloat (FMOD_DSP_STATE *dsp_state, int index, float *value, char *valuestr);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspsetparamdata(FMOD_DSP_STATE *dsp_state, int index, void *data, unsigned int /*length*/);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspgetparamdata(FMOD_DSP_STATE * /*dsp_state*/, int index, void ** /*value*/, unsigned int * /*length*/, char * /*valuestr*/);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_register (FMOD_DSP_STATE *dsp_state);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_deregister (FMOD_DSP_STATE *dsp_state);
FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_mix (FMOD_DSP_STATE *dsp_state, int stage);

static FMOD_DSP_PARAMETER_DESC FMOD_RNBO_@PLUGIN_NAME@_Parameters[MAX_RNBO_PARAMETERS];
static bool FMOD_RNBO_@PLUGIN_NAME@_Running = false;
struct FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct
{
    size_t attributesIndex;
    float tailLength;
    bool isInstrument;
    uint32_t attributeBitmap;
    bool multiChannelExtendable;
    size_t indexMap[MAX_RNBO_PARAMETERS];
};
static FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct FMOD_RNBO_@PLUGIN_NAME@_UserData;
FMOD_DSP_PARAMETER_DESC *FMOD_RNBO_@PLUGIN_NAME@_DSPParam[MAX_RNBO_PARAMETERS] = {};

FMOD_DSP_DESCRIPTION FMOD_RNBO_@PLUGIN_NAME@_Desc =
{
    FMOD_PLUGIN_SDK_VERSION,
    "@PLUGIN_NAME@", //name
    0x00010000, //plugin version
    0, //inbuffer
    0, //outbuffer
    FMOD_RNBO_@PLUGIN_NAME@_dspcreate,
    FMOD_RNBO_@PLUGIN_NAME@_dsprelease,
    FMOD_RNBO_@PLUGIN_NAME@_dspreset,
    0,
    FMOD_RNBO_@PLUGIN_NAME@_dspprocess,
    0,
    MAX_RNBO_PARAMETERS,
    FMOD_RNBO_@PLUGIN_NAME@_DSPParam,
    FMOD_RNBO_@PLUGIN_NAME@_dspsetparamfloat, //setfloat
    0, //setint
    0, //setbool
    FMOD_RNBO_@PLUGIN_NAME@_dspsetparamdata, //setdata
    FMOD_RNBO_@PLUGIN_NAME@_dspgetparamfloat, //getfloat
    0, //getint
    0, //getbool
    FMOD_RNBO_@PLUGIN_NAME@_dspgetparamdata, //getdata
    0,
    0, //userdata
    FMOD_RNBO_@PLUGIN_NAME@_sys_register,
    FMOD_RNBO_@PLUGIN_NAME@_sys_deregister,
    FMOD_RNBO_@PLUGIN_NAME@_sys_mix
};

extern "C" {
#ifdef EMSCRIPTEN
    // For WebGL builds, prefix with plugin name to avoid conflicts
    F_EXPORT FMOD_DSP_DESCRIPTION* F_CALL @PLUGIN_NAME@_GetDSPDescription()
#else
    // For other platforms, keep original name
    F_EXPORT FMOD_DSP_DESCRIPTION* F_CALL FMODGetDSPDescription()
#endif
{
    auto patcherInterface = @PLUGIN_NAME@FactoryFunction(RNBO::Platform::get())();
    RNBO::CoreObject obj((RNBO::UniquePtr<RNBO::PatcherInterface>(patcherInterface)));
    
    int n = (int)(obj.getNumParameters());
    int finalParameters = 0;
    RNBO::ParameterIndex i = 0;
    for(;i<n;i++)
    {
        const char *id = obj.getParameterId(i);
        //skip all subpatch params
        if (strstr(id, "/") != nullptr)
            continue;
        
        const char *name = obj.getParameterName(i);
        if(std::char_traits<char>::compare(name, "Name", 4) == 0)
        {
            strcpy(FMOD_RNBO_@PLUGIN_NAME@_Desc.name, &name[5]);
        }
        else if (std::char_traits<char>::compare(name, "Sys_tail", 8) == 0)
        {
            FMOD_RNBO_@PLUGIN_NAME@_UserData.tailLength = obj.getParameterValue(i);
        }
        else
        {
            RNBO::ParameterInfo info;
            obj.getParameterInfo(i, &info);
            FMOD_RNBO_@PLUGIN_NAME@_DSPParam[finalParameters] = &FMOD_RNBO_@PLUGIN_NAME@_Parameters[finalParameters];
            FMOD_RNBO_@PLUGIN_NAME@_UserData.indexMap[finalParameters] = i;
            FMOD_DSP_INIT_PARAMDESC_FLOAT(FMOD_RNBO_@PLUGIN_NAME@_Parameters[finalParameters], name, info.unit, "The RNBO param:" , info.min, info.max , info.initialValue);
            finalParameters++;
        }
    }
    
    if(CheckAnyRNBOSystemTag(obj))
    {
        FMOD_RNBO_@PLUGIN_NAME@_DSPParam[finalParameters] = &FMOD_RNBO_@PLUGIN_NAME@_Parameters[finalParameters];
        FMOD_DSP_INIT_PARAMDESC_DATA(FMOD_RNBO_@PLUGIN_NAME@_Parameters[finalParameters],"3D Attributes","","", FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES);
        
        FMOD_RNBO_@PLUGIN_NAME@_UserData.attributesIndex = finalParameters;
        
        finalParameters++;
    }
    
    FMOD_RNBO_@PLUGIN_NAME@_UserData.isInstrument = true;
    
    if(obj.getNumInputChannels() > 0)
    {
        FMOD_RNBO_@PLUGIN_NAME@_Desc.numinputbuffers = 1;
        FMOD_RNBO_@PLUGIN_NAME@_UserData.isInstrument = false;
        FMOD_RNBO_@PLUGIN_NAME@_UserData.multiChannelExtendable = obj.getNumInputChannels() == 1 && obj.getNumOutputChannels() == 1;
    }
    
    if(obj.getNumOutputChannels() > 0)
        FMOD_RNBO_@PLUGIN_NAME@_Desc.numoutputbuffers = 1;
    
    FMOD_RNBO_@PLUGIN_NAME@_Desc.userdata = &FMOD_RNBO_@PLUGIN_NAME@_UserData;
    FMOD_RNBO_@PLUGIN_NAME@_Desc.numparameters = finalParameters;
    
    return &FMOD_RNBO_@PLUGIN_NAME@_Desc;
}

}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspcreate(FMOD_DSP_STATE *dsp_state)
{
    dsp_state->plugindata = (RNBOWrapper *)FMOD_DSP_ALLOC(dsp_state, sizeof(RNBOWrapper));
    if (!dsp_state->plugindata)
    {
        return FMOD_ERR_MEMORY;
    }
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    
    // Get the factory function and create the core object
    auto patcherInterface = @PLUGIN_NAME@FactoryFunction(RNBO::Platform::get())();
    state->rnboObj.push_back(std::make_unique<RNBO::CoreObject>(
        RNBO::UniquePtr<RNBO::PatcherInterface>(patcherInterface)));
    
    void* rawData;
    FMOD_DSP_GETUSERDATA(dsp_state, &rawData);
    state->tailLength = ((FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*)rawData)->tailLength;
    state->isInstrument = ((FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*)rawData)->isInstrument;
    state->multiChannelExpandable = ((FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*)rawData)->multiChannelExtendable;
    FMOD_DSP_GETSAMPLERATE(dsp_state, &state->sampleRate);
    
    //FMOD_DSP_LOG(dsp_state, FMOD_DEBUG_LEVEL_LOG, "Create","Taillength: %d", state->tailLength);
    //FMOD_DSP_LOG(dsp_state, FMOD_DEBUG_LEVEL_LOG, "Create","Is istrument: %d", state->isInstrument);
    //FMOD_DSP_LOG(dsp_state, FMOD_DEBUG_LEVEL_LOG, "Create","Multichannelthing: %d", state->multiChannelExpandable);
    
    state->Init();
    
    return FMOD_OK;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dsprelease(FMOD_DSP_STATE *dsp_state)
{
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    FMOD_DSP_LOG(dsp_state, FMOD_DEBUG_LEVEL_LOG, "Release","%x", state);
    FMOD_DSP_FREE(dsp_state, state);
    return FMOD_OK;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspprocess(FMOD_DSP_STATE *dsp_state, unsigned int length, const FMOD_DSP_BUFFER_ARRAY *inbufferarray, FMOD_DSP_BUFFER_ARRAY *outbufferarray, FMOD_BOOL inputsidle, FMOD_DSP_PROCESS_OPERATION op)
{
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    
    auto numChans = state->rnboObj[0]->getNumOutputChannels();
    auto numInChans = state->rnboObj[0]->getNumInputChannels();
    
    if(op == FMOD_DSP_PROCESS_QUERY)
    {
        state->inputsIdle = inputsidle;
        
        if (!outbufferarray)
            return FMOD_ERR_DSP_DONTPROCESS;
        
        if(numInChans > 1)
            if (inbufferarray->buffernumchannels[0] != (int)numInChans)
                return FMOD_ERR_DSP_DONTPROCESS;
        
        if(state->multiChannelExpandable)
        {
            auto chans = inbufferarray->buffernumchannels[0];
            
            for(size_t i(0);i<chans;i++)
            {
                while (!state->rnboObj[i]->prepareToProcess(state->sampleRate,4096)) {}
            }
            
            if (chans != state->lastChannelCount)
            {
                state->lastChannelCount = chans;
                
                if(state->deInterleaveBuffer)
                    delete[] state->deInterleaveBuffer;
                if(state->interleaveBuffer)
                    delete[] state->interleaveBuffer;
                
                state->deInterleaveBuffer = new float[length * chans];
                state->interleaveBuffer = new float[length * chans];
            }
            
            outbufferarray->speakermode = GetSpeakermode(chans);
            outbufferarray->buffernumchannels[0] = chans;
            
        }
        else
        {
            outbufferarray->speakermode = GetSpeakermode(numChans);
            outbufferarray->buffernumchannels[0] = (int)numChans;
            while (!state->rnboObj[0]->prepareToProcess(state->sampleRate,4096)) {}
        }
        
        
        if(inputsidle != state->lastIdleState)
        {
            state->timeStore = state->rnboObj[0]->getCurrentTime();
            state->shouldGoIdle = false;
        }
        
        if(inputsidle && state->shouldGoIdle)
            return FMOD_ERR_DSP_DONTPROCESS;
        
        state->lastIdleState =  inputsidle;
        
        return FMOD_OK;
    }

    if(state->multiChannelExpandable)
    {
        auto chans = inbufferarray->buffernumchannels[0];
        
        //de-interleave
        for(size_t i(0);i<length;i++)
        {
            for(size_t c(0);c<chans;c++)
            {
                state->deInterleaveBuffer[c*length + i] = inbufferarray[0].buffers[0][chans*i + c];
            }
        }
        
        //process
        for(size_t i(0);i<chans;i++)
        {
            state->rnboObj[i]->process<float*>(&state->deInterleaveBuffer[i*length], 1, &state->interleaveBuffer[i*length], 1, length);
        }
        
        //interleave
        for(size_t c(0);c<chans;c++)
        {
            for(size_t i(0);i<length;i++)
            {
                outbufferarray[0].buffers[0][c + chans*i] = state->interleaveBuffer[c*length + i];
            }
        }
        
    }
    else
    {
        state->rnboObj[0]->process<float*>(inbufferarray[0].buffers[0], numInChans, outbufferarray[0].buffers[0], numChans, length);
    }
    
    if(!state->isInstrument && state->inputsIdle)
    {
        if (state->tailLength <= 0)
        {
            state->shouldGoIdle = true;
            return FMOD_OK;
        }
            
        if (CheckIfOutputQuiet(outbufferarray[0].buffers[0], length, numChans))
        {
            state->shouldGoIdle = (state->rnboObj[0]->getCurrentTime() - state->timeStore) > state->tailLength;
        }
        else
        {
            state->timeStore = state->rnboObj[0]->getCurrentTime();
        }
    }
    /*
    static size_t counter = 0;
    if (counter % 500 == 0)
        FMOD_DSP_LOG(dsp_state, FMOD_DEBUG_LEVEL_LOG, "Proc","Idle: %i", inputsidle);
    counter++;
    */
    return FMOD_OK;
}


FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspreset(FMOD_DSP_STATE *dsp_state)
{
    
    return FMOD_OK;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspsetparamfloat(FMOD_DSP_STATE *dsp_state, int index, float value)
{
    
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    
    void* userDataPtr;
    FMOD_DSP_GETUSERDATA(dsp_state, &userDataPtr);
    FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct *userData = static_cast<FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*>(userDataPtr);
    
    if(index < state->rnboObj[0]->getNumParameters())
    {
        if (state->multiChannelExpandable)
            for(size_t i(0);i<(state->lastChannelCount == 0 ? MAX_CHANS : state->lastChannelCount);i++)
                state->rnboObj[i]->setParameterValue(userData->indexMap[index], value);
        else
            state->rnboObj[0]->setParameterValue(userData->indexMap[index], value);
        return FMOD_OK;
    }
    
    return FMOD_ERR_INVALID_PARAM;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspgetparamfloat(FMOD_DSP_STATE *dsp_state, int index, float *value, char *valuestr)
{
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    
    void* userDataPtr;
    FMOD_DSP_GETUSERDATA(dsp_state, &userDataPtr);
    FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct *userData = static_cast<FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*>(userDataPtr);
    
    if(index < state->rnboObj[0]->getNumParameters())
    {
        *value = state->rnboObj[0]->getParameterValue(userData->indexMap[index]);
        return FMOD_OK;
    }
    
    return FMOD_ERR_INVALID_PARAM;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspsetparamdata(FMOD_DSP_STATE *dsp_state, int index, void *data, unsigned int /*length*/)
{
    RNBOWrapper *state = (RNBOWrapper *)dsp_state->plugindata;
    void* userDataPtr;
    FMOD_DSP_GETUSERDATA(dsp_state, &userDataPtr);
    FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct *userData = static_cast<FMOD_RNBO_@PLUGIN_NAME@_UserDataStruct*>(userDataPtr);

    if(index == userData->attributesIndex)
    {
        if (state->multiChannelExpandable)
            for(size_t i(0);i<(state->lastChannelCount == 0 ? MAX_CHANS : state->lastChannelCount);i++)
                DispatchRNBOMessages(state->rnboObj[i].get(), data);
        else
            DispatchRNBOMessages(state->rnboObj[0].get(), data);
        return FMOD_OK;
    }

    return FMOD_ERR_INVALID_PARAM;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_dspgetparamdata(FMOD_DSP_STATE *dsp_state, int index, void ** /*value*/, unsigned int * /*length*/, char * /*valuestr*/)
{
    //unused

    return FMOD_ERR_INVALID_PARAM;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_register(FMOD_DSP_STATE * /*state*/)
{
    FMOD_RNBO_@PLUGIN_NAME@_Running = true;
    
    return FMOD_OK;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_deregister(FMOD_DSP_STATE *state)
{
    FMOD_RNBO_@PLUGIN_NAME@_Running = false;
    
    if (state && state->plugindata) {
        RNBOWrapper *wrapper = (RNBOWrapper *)state->plugindata;
        wrapper->Reset();
    }
    
    return FMOD_OK;
}

FMOD_RESULT F_CALLBACK FMOD_RNBO_@PLUGIN_NAME@_sys_mix(FMOD_DSP_STATE * /*state*/, int /*stage*/)
{
    return FMOD_OK;
}



